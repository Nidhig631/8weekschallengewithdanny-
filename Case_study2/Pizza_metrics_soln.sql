CREATE TABLE RUNNERS (
  "RUNNER_ID" INTEGER,
  "REGISTRATION_DATE" DATE
);
INSERT INTO RUNNERS
  ("RUNNER_ID", "REGISTRATION_DATE")
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');


DROP TABLE IF EXISTS CUSTOMER_ORDERS;
CREATE TABLE CUSTOMER_ORDERS (
  "ORDER_ID" INTEGER,
  "CUSTOMER_ID" INTEGER,
  "PIZZA_ID" INTEGER,
  "EXCLUSIONS" VARCHAR(4),
  "EXTRAS" VARCHAR(4),
  "ORDER_TIME" DATETIME
);

INSERT INTO CUSTOMER_ORDERS
  ("ORDER_ID", "CUSTOMER_ID", "PIZZA_ID", "EXCLUSIONS", "EXTRAS", "ORDER_TIME")
VALUES
  ('1', '101', '1', NULL, NULL, '2020-01-01 18:05:02'),
  ('2', '101', '1', NULL, NULL, '2020-01-01 19:00:52'),
  ('3', '102', '1', NULL, NULL, '2020-01-02 12:51:23'),
  ('3', '102', '2', NULL, NULL, '2020-01-02 12:51:23'),
  ('4', '103', '1', '4', NULL, '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', NULL, '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', NULL, '2020-01-04 13:23:46'),
  ('5', '104', '1', NULL, '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', NULL, NULL, '2020-01-08 21:03:13'),
  ('7', '105', '2', NULL, '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', NULL, NULL, '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', NULL, NULL, '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');


DROP TABLE IF EXISTS RUNNER_ORDERS;
CREATE TABLE RUNNER_ORDERS (
  "ORDER_ID" INTEGER,
  "RUNNER_ID" INTEGER,
  "PICKUP_TIME" VARCHAR(19),
  "DISTANCE" VARCHAR(7),
  "DURATION" VARCHAR(10),
  "CANCELLATION" VARCHAR(23)
);

INSERT INTO RUNNER_ORDERS
  ("ORDER_ID", "RUNNER_ID", "PICKUP_TIME", "DISTANCE", "DURATION", "CANCELLATION")
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20KM', '32 MINUTES',NULL),
  ('2', '1', '2020-01-01 19:10:54', '20KM', '27 MINUTES', NULL),
  ('3', '1', '2020-01-02 00:12:37', '13.4KM', '20 MINS', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4KM', '40MINS', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10KM', '15MINS', NULL),
  ('6', '3', 'NULL', 'NULL', 'NULL', 'RESTAURANT CANCELLATION'),
  ('7', '2', '2020-01-08 21:30:45', '25KM', '25MINS', NULL),
  ('8', '2', '2020-01-10 00:15:02', '23.4 KM', '15 MINUTE', NULL),
  ('9', '2', 'NULL', 'NULL', 'NULL', 'CUSTOMER CANCELLATION'),
  ('10', '1', '2020-01-11 18:50:20', '10KM', '10MINUTES', NULL);

  select * from RUNNER_ORDERS
DROP TABLE IF EXISTS PIZZA_NAMES;
CREATE TABLE PIZZA_NAMES (
  "PIZZA_ID" INTEGER,
  "PIZZA_NAME" TEXT
);
INSERT INTO PIZZA_NAMES
  ("PIZZA_ID", "PIZZA_NAME")
VALUES
  (1, 'MEATLOVERS'),
  (2, 'VEGETARIAN');


DROP TABLE IF EXISTS PIZZA_RECIPES;
CREATE TABLE PIZZA_RECIPES (
  "PIZZA_ID" INTEGER,
  "TOPPINGS" TEXT
);
INSERT INTO PIZZA_RECIPES
  ("PIZZA_ID", "TOPPINGS")
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');


DROP TABLE IF EXISTS PIZZA_TOPPINGS;
CREATE TABLE PIZZA_TOPPINGS (
  "TOPPING_ID" INTEGER,
  "TOPPING_NAME" TEXT
);
INSERT INTO PIZZA_TOPPINGS
  ("TOPPING_ID", "TOPPING_NAME")
VALUES
  (1, 'BACON'),
  (2, 'BBQ SAUCE'),
  (3, 'BEEF'),
  (4, 'CHEESE'),
  (5, 'CHICKEN'),
  (6, 'MUSHROOMS'),
  (7, 'ONIONS'),
  (8, 'PEPPERONI'),
  (9, 'PEPPERS'),
  (10, 'SALAMI'),
  (11, 'TOMATOES'),
  (12, 'TOMATO SAUCE');


                                  --PIZZA METRICS
--HOW MANY PIZZAS WERE ORDERED?
SELECT 
COUNT(ORDER_ID) AS NO_OF_ORDERED_PIZZA 
FROM CUSTOMER_ORDERS;

--HOW MANY UNIQUE CUSTOMER ORDERS WERE MADE?
SELECT 
count(distinct CUSTOMER_ID)
FROM CUSTOMER_ORDERS;

--HOW MANY SUCCESSFUL ORDERS WERE DELIVERED BY EACH RUNNER?

SELECT  runner_id,
	count(order_id) as order_delivered
FROM RUNNER_ORDERS
WHERE CANCELLATION is null 
group by RUNNER_ID;

--HOW MANY OF EACH TYPE OF PIZZA WAS DELIVERED?
SELECT C.PIZZA_ID,
COUNT(C.PIZZA_ID) AS COUNT_OF_PIZZA_DELIVERED
FROM CUSTOMER_ORDERS C INNER JOIN RUNNER_ORDERS R
ON C.ORDER_ID=R.ORDER_ID
WHERE CANCELLATION is null
GROUP BY C.PIZZA_ID

--HOW MANY VEGETARIAN AND MEATLOVERS WERE ORDERED BY EACH CUSTOMER?
SELECT CUSTOMER_ID,
COUNT(CASE WHEN PIZZA_ID=1 THEN 1 ELSE NULL END) AS MEATLOVERS,
COUNT(CASE WHEN PIZZA_ID=2 THEN 1 ELSE NULL END) AS VEGETARIAN
FROM CUSTOMER_ORDERS
GROUP BY CUSTOMER_ID

--WHAT WAS THE MAXIMUM NUMBER OF PIZZAS DELIVERED IN A SINGLE ORDER?
WITH RANK_ORDER
AS
(
SELECT C.ORDER_ID ,COUNT(*) AS DELIVERED_PIZZAS,
DENSE_RANK()OVER(ORDER BY COUNT(*) DESC) AS RANK
FROM CUSTOMER_ORDERS C INNER JOIN RUNNER_ORDERS R
ON C.ORDER_ID=R.ORDER_ID
WHERE R.CANCELLATION is null
GROUP BY C.ORDER_ID
)
SELECT * FROM RANK_ORDER WHERE RANK=1;

--FOR EACH CUSTOMER, HOW MANY DELIVERED PIZZAS HAD AT LEAST 1 
--CHANGE AND HOW MANY HAD NO CHANGES?

SELECT C.CUSTOMER_ID,
SUM(CASE WHEN C.EXCLUSIONS is null AND C.EXTRAS is null THEN 1 ELSE 0 END )AS NO_CHANGE_COUNT
,
SUM(CASE WHEN C.EXCLUSIONS is not null AND C.EXTRAS is not null THEN 1 ELSE 0 END )AS CHANGE_COUNT
FROM CUSTOMER_ORDERS C INNER JOIN RUNNER_ORDERS R
ON C.ORDER_ID=R.ORDER_ID
where r.CANCELLATION is null
GROUP BY CUSTOMER_ID

--HOW MANY PIZZAS WERE DELIVERED THAT HAD BOTH EXCLUSIONS AND EXTRAS?
SELECT CUSTOMER_ID,
SUM( CASE WHEN C.EXCLUSIONS is not null
AND C.EXTRAS IS NOT NULL  THEN 1 ELSE 0 END )AS NO_CHANGE_COUNT
FROM CUSTOMER_ORDERS C INNER JOIN RUNNER_ORDERS R
ON C.ORDER_ID=R.ORDER_ID
WHERE 
R.CANCELLATION  is null
GROUP BY CUSTOMER_ID

--What was the total volume of pizzas ordered for
--each hour of the day?

SELECT COUNT(PIZZA_ID),
DATEPART(HOUR , ORDER_TIME)  HOUR_OF_DAY
FROM CUSTOMER_ORDERS
GROUP BY DATEPART(HOUR , ORDER_TIME) 

--What was the volume of orders for each day of the week?
SELECT ORDER_TIME ,COUNT(PIZZA_ID) AS PIZZA_ID_COUNT,
DATENAME(WEEKday , ORDER_TIME) AS  WEEK
FROM CUSTOMER_ORDERS
group by ORDER_TIME,
DATENAME(WEEKDAY , ORDER_TIME) 







